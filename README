   
My Tiny Crypto Blockchain Simulators
====================================
Copyright (c) 2018 dmitrynizh

These simulators are a toys, yet succeed in demonstrating many
concepts of digital currency, peer-to-peer distributed consensus
mechanisms, secure hashing, digital signatures, public key
cryptography.

Each java file in this repo is standalone (independent).  Currently, 3
files are simulators - BlockChain.java, CryptoBlockChain.java and
Mine.java - and tehe rest are utilities. Coding style in the simulator
files is deliberately somewhat terse because initially this initiative
was a long cold winter weekend project, and the motivation was to try
fit some non-trivial functionality into very small number of
lines. Mine was hacked first, followed by p2p BlockChain and
CryptoBlockChain. At that time, upon completion, the line count was:

Mine.java             :  90 lines
BlockChain.java       : 100 lines
CryptoBlockChain.java : 160 lines

As CryptoBlockChain is expected to get more updates, its line count
will increase perhpas substantially as for the sake of clarity, there
is a benefit in adding some verbosity and commentary. Still the goal
is to keep it strictly under 300 lines, standalone (depending only on
Java SE jars).

File CryptoBlockChain.java
--------------------------
This is the most complex one. It simulates, in real time,  the workings of a
cryptographic blockchain based on proof-of-work as outlined in the
Bitcoin White Paper.  To compile and run this simulator, you need JDK
Java 8 or newer.

Compile:   % javac CryptoBlockChain.java
Run:       $ java CryptoBlockChain

You can alter the default behavior by providing optional command line
parameters as integers:
 
$ java CryptoBlockChain <node-count> <coin-difficulty> <mining-batch> <block-count>

<node-count>       - How many nodes are in the p2p network. Each node mines new blocks. 
                     Default is 7 nodes.
<coin-difficulty>  - Miners seek for that many zeros in block hash values they generate. 
                     Default is 6. Values above 10 are interpreted as zero bit count.
<mining-batch>     - Miners make random choices to generate from 0 to 10M * <mining-batch> hashes 
                     without being interrupted by new blocks/transactions.
                     Default is 1
<block-count>      - The network shuts down after that many blocks were produced. 
                     Default is 10.

Examples:

$ java CryptoBlockChain 15 
$ java CryptoBlockChain  7 6 1 5
$ java CryptoBlockChain  7 50 1 5 # as above but with extra two zero bits

The parameters <coin-difficult>y and <mining-batch> are somewhat coupled
as in a system with many nodes and transactions it is rarely possible
to mine with high difficulty in a small number of iterations before
accepting new transactions and blocks.

When the network reaches the block-count goal, nodes start shutting
down. Each node saves its blockchain ledger onto the disk.  The
consensus is demonstated when all such files are essentially
identical.

The rest of CryptoBlockChain is as described in the Bitcoin WP
(Satoshi Nakamoto, " Bitcoin: A Peer-to-Peer Electronic Cash System")
specifically the key mechanisms described in chapters 4 and 5 are
implemented precisely as described:

  "4. Proof-of-Work
  ...The proof-of-work involves scanning for a value that when hashed,
  such as with SHA-256, the hash begins with a number of zero bits.  For
  our timestamp network, we implement the proof-of-work by incrementing
  a nonce in the block until a value is found that gives the block's
  hash the required zero bits."
  
  "5. Network
  The steps to run the network are as follows:
  1) New transactions are broadcast to all nodes.
  2) Each node collects new transactions into a block.
  3) Each node works on finding a difficult proof-of-work for its block.
  4) When a node finds a proof-of-work, it broadcasts the block to all nodes.
  5) Nodes accept the block only if all transactions in it are valid and not 
     already spent.
  6) Nodes express their acceptance of the block by working on creating
     the next block in the chain, using the hash of the accepted block
     as the previous hash.
  
  Nodes always consider the longest chain to be the correct one and will
  keep working on extending it. If two nodes broadcast different
  versions of the next block simultaneously, some nodes may receive one
  or the other first. In that case, they work on the first one they
  received, but save the other branch in case it becomes longer. The tie
  will be broken when the next proof-of-work is found and one branch
  becomes longer."

At the moment, some mechanisms mentioned in the paper are omitted or
simplified:

(1) No mechanism for the nodes to join and leave the network at will,
    all start and terminate at once. As a conseuence, node numbers are
    employed as unique payment 'addresses'. All nodes assumed to have 
    enough coins, and currently, all nodes are miners.
(2) No multiple input transactions (chapter 9).
(3) No txn links, ch.2, and sender is assumed to have the sum to spend.
(4) Merkle trees not pruned as described in ch.7, and in fact, not currently kept.
(5) No transaction fees.
(7) Reward is fixed at 50 btc, difficulty is set initially and does not change later
(8) Nodes can not yet request a missing block (chapter 5) nor can do 
    simplified payment verification (chapter 8).
(9) each node uses a single, fixed ECDSA sk/pk pair, does not generate a new pair
    for each txn as recommended in chapter 10.

Most of these limitations can be fairly easily removed in future
updates time permitting.  Priority will be given first to (3), then
perhaps (2), (9), (1) and (4).

No attempt was made to copy-cat any implementation details of a real
bitcoin client, Apes, protocols, layouts, representations. The goal
was to produce Clean-Room simulation based solely on what is specified
in the Bitcoin WP. Notable exceptions are (1) use of ECDSA and (2)
switch from base64 to base58 in later updates.

The screen log that appears when CryptoBlockChain runs varies depending on 
the number of nodes running. For 4 or less nodes, 
full ECDSA public key strings and signature strings are printed, with 5+ nodes
these are abbreviated. With 20+ nodes, only new block events are printed out.

At the moment the nodes broadcast the following:

Node's public key  :  PK <address> <pk>. This can be seen as txn "in preamble"
Transaction        :  TXN <stamp> <address-in> --> <address-out>  -- <signature>
Newly minted block :  BLN <hash> <prev-hash> <nonce> ... MINT ... <address> <signature> [TXN ...]*
Halting broadcast  :  ALL HALT AND DUMP
Node's pk request  :  PK? <address> >

<signature> and <pk> are printed out in base58 (used to be 64). 
Hashes are in hex.

Sample log:

$ javac CryptoBlockChain.java
$ java CryptoBlockChain 7 7 2 3
node5> PK 5 aSq9Ds...6BaXLW
node1> PK 1 aSq9Ds...TcKuyK
node3> PK 3 aSq9Ds...c6Nwq1
node6> PK 6 aSq9Ds...Skakws
node2> PK 2 aSq9Ds...mVeoF9
node0> PK 0 aSq9Ds...isa7ed
node4> PK 4 aSq9Ds...cjY7gK
node3> PK 3 aSq9Ds...c6Nwq1
node3> TXN at 18:10:00 3 --> 1.869btc to 2 -- AN1rKv...BGiqBo2 

node1> PK 1 aSq9Ds...TcKuyK
node1> TXN at 18:10:02 1 --> 5.904btc to 0 -- AN1rKv...KinkUYa 

node6> PK 6 aSq9Ds...Skakws
node6> TXN at 18:10:03 6 --> 7.220btc to 1 -- iKx1CJ...9bnpgeWV 

node4> PK 4 aSq9Ds...cjY7gK
node4> TXN at 18:10:19 4 --> 9.945btc to 5 -- iKx1CJ...WkSYJwTQ 

node3> PK 3 aSq9Ds...c6Nwq1
node3> TXN at 18:10:23 3 --> 3.957btc to 0 -- AN1rKr...H2963CB 

node0> PK 0 aSq9Ds...isa7ed
node0> TXN at 18:10:26 0 --> 1.936btc to 6 -- 381yXZ...TGa57T 

node1> PK 1 aSq9Ds...TcKuyK
node1> TXN at 18:10:28 1 --> 3.728btc to 2 -- AN1rKp...rC2ZU1z 

node4> PK 4 aSq9Ds...cjY7gK
node4> TXN at 18:10:41 4 --> 0.436btc to 3 -- 381yXZ...vyZv5t 

node3> PK 3 aSq9Ds...c6Nwq1
node3> TXN at 18:10:50 3 --> 9.918btc to 3 -- 381yXZ...aaQsRv 

node4> PK 4 aSq9Ds...cjY7gK
node4> TXN at 18:10:51 4 --> 6.286btc to 5 -- iKx1CJ...bmfqxsWh 

node3> BLN
0000000312d99ebdddf2763add485b73793f7615af82d6a2e9a53ce147e2b92a
00
4911090 1519351861954
| MINT new coins. 3 <-- 50btc mining reward -- AN1rKp...zrETS71 
, TXN at 18:10:00 3 --> 1.869btc to 2 -- AN1rKv...BGiqBo2 
, TXN at 18:10:02 1 --> 5.904btc to 0 -- AN1rKv...KinkUYa 
, TXN at 18:10:03 6 --> 7.220btc to 1 -- iKx1CJ...9bnpgeWV 
, TXN at 18:10:19 4 --> 9.945btc to 5 -- iKx1CJ...WkSYJwTQ 
, TXN at 18:10:23 3 --> 3.957btc to 0 -- AN1rKr...H2963CB 
, TXN at 18:10:26 0 --> 1.936btc to 6 -- 381yXZ...TGa57T 
, TXN at 18:10:28 1 --> 3.728btc to 2 -- AN1rKp...rC2ZU1z 
, TXN at 18:10:41 4 --> 0.436btc to 3 -- 381yXZ...vyZv5t 
, TXN at 18:10:50 3 --> 9.918btc to 3 -- 381yXZ...aaQsRv 
, TXN at 18:10:51 4 --> 6.286btc to 5 -- iKx1CJ...bmfqxsWh 

node1> PK 1 aSq9Ds...TcKuyK
node1> TXN at 18:11:08 1 --> 1.280btc to 6 -- iKx1CJ...p77KYpWL 

node1> BLN
0000000d7994b77eb63bfd46145995a5cdd67d6092fe5860689ab141cd10ef48
0000000312d99ebdddf2763add485b73793f7615af82d6a2e9a53ce147e2b92a
3106016 1519351873939
| MINT new coins. 1 <-- 50btc mining reward -- AN1rKp...yi3Xsbw 
, TXN at 18:10:51 4 --> 6.286btc to 5 -- iKx1CJ...bmfqxsWh 
, TXN at 18:11:08 1 --> 1.280btc to 6 -- iKx1CJ...p77KYpWL 

node5> PK 5 aSq9Ds...6BaXLW
node4> PK 4 aSq9Ds...cjY7gK
node5> TXN at 18:11:38 5 --> 9.733btc to 1 -- AN1rKv...a3exoJ7 

node4> TXN at 18:11:39 4 --> 8.256btc to 6 -- iKx1CJ...kKHVG82z 

node5> BLN
0000000669f06e9c2b2fc41e08967a53d8dabfc8e8143693981227cd2b0463ed
0000000d7994b77eb63bfd46145995a5cdd67d6092fe5860689ab141cd10ef48
4424816 1519351906575
| MINT new coins. 5 <-- 50btc mining reward -- iKx1CJ...spP8SZVY 
, TXN at 18:11:08 1 --> 1.280btc to 6 -- iKx1CJ...p77KYpWL 
, TXN at 18:11:38 5 --> 9.733btc to 1 -- AN1rKv...a3exoJ7 
, TXN at 18:11:39 4 --> 8.256btc to 6 -- iKx1CJ...kKHVG82z 

node3 sender exiting.
node5> ALL HALT AND DUMP
node0 listener exiting.
node3 listener exiting.
node6 listener exiting.
node4 listener exiting.
node2 listener exiting.
node5 listener exiting.
node1 listener exiting.
node5 sender exiting.
node4 sender exiting.
node6 sender exiting.
node1 sender exiting.
node0 sender exiting.
node2 sender exiting.
$ 


This particular run results in 7 ledgers - blockchain0.txt, blockchain1.txt, etc
- saved to current directory, one for each node.  All ledgers are
identical and list the blocks that were accepted by the nodes:

=== BLOCK ===
 hash: 000000a30b4e56dd450de646cafa8ec411545898864b886a43e4fcf27faebbe8
 prev: 00
nonce: 376726 minted: Thu Feb 22 18:17:29 PST 2018 
[MINT new coins. 0 <-- 50btc mining reward 381yXZKRzkDAcbQ3ztkxg8ioHSP398QBVjzJ7jgLh62ntBx3LgYvnU1hKsidp88xSWyTDcvLrgvx9CxELKYWfaxdRHNsuLjA 
 ]

=== BLOCK ===
 hash: 000000ea55a795dd61786fd33cde17f72172c01d5adb38cdff50d38b6cdb0c23
 prev: 000000a30b4e56dd450de646cafa8ec411545898864b886a43e4fcf27faebbe8
nonce: 162273 minted: Thu Feb 22 18:17:29 PST 2018 
[MINT new coins. 3 <-- 50btc mining reward iKx1CJNGLVipRWbUwNk2NqoAXXx7oaxr9E2ZBvnhS1H9nDL5Er3QsjZAEBukHzQf6vkQAEX7ssB86FDoSKxovALT6Ry4oGBwAE 
 ]

=== BLOCK ===
 hash: 00000047d52abf970feadb652cdc56e36a5efa171b3465da1701172e3b0d8c98
 prev: 000000ea55a795dd61786fd33cde17f72172c01d5adb38cdff50d38b6cdb0c23
nonce: 671886 minted: Thu Feb 22 18:17:49 PST 2018 
[MINT new coins. 1 <-- 50btc mining reward iKx1CJNSLNsfLbCVNwrKjiUvJjCLTuR6GN3iE7SFxkgVwCyERvyCar317qaCpXPXhZHnnRxVB7feYnA3tkcfr6ZTcoH5EoJWEm 
, TXN at 18:17:43 2 --> 2.295btc to 3 AN1rKvtVJnVyKBivWbStMnyehoqgJVK26TWgNZ35jV2XVraUMw1YPuUdomtPGJY9At42FimuodUmq8cMtXDAACvbZgTExF3qV 
 ]

=== BLOCK ===
 hash: 0000000a36b00b60a3fa6bb9a8d8ffa1e1bf75ddbd2f494de5c01d39959d7895
 prev: 00000047d52abf970feadb652cdc56e36a5efa171b3465da1701172e3b0d8c98
nonce: 5001444 minted: Thu Feb 22 18:18:12 PST 2018 
[MINT new coins. 4 <-- 50btc mining reward 381yXZUsVWhJcjWpnL6Cw3nMJYaphWafSedi7Ky294LerrmxQWf7B84qQnZ7A9ZPJufEizo7QuhAb3w2c1rjCKMyHgUxRSm5 
, TXN at 18:17:43 2 --> 2.295btc to 3 AN1rKvtVJnVyKBivWbStMnyehoqgJVK26TWgNZ35jV2XVraUMw1YPuUdomtPGJY9At42FimuodUmq8cMtXDAACvbZgTExF3qV 
, TXN at 18:17:57 4 --> 7.095btc to 5 AN1rKopvNyeFHpDcC3vVfBYXtJtGwVJm3NtAGG5eR2ivi2P3ihd8BveVm4fQGUhWW3Eq8pRJHk9bMk2uhg3VNz7rvRYnTFHyA 
, TXN at 18:18:00 5 --> 3.637btc to 6 381yXaPFYJjrrkmWiYJedVAgGVK1ew2eG9DGpe6zyG4vmj5VTm72661TAbjCzpGv3hvnH1EzMhcm2jAwNRmeNLoB61DzUzqi 
, TXN at 18:18:02 2 --> 9.562btc to 6 iKx1CJMQng2vpKVN27hWGGj2nnndJx7nHchjyiPrEiFZznDV9XpgfiUQfac6Wv35AgeXQpad1m3BycdyLP7PgpssJnwon3beW9 
 ]

=== BLOCK ===
 hash: 000000756b7aa2cf83dac95cf0609989be1d9b60f3cb96303a19249dfcfbf355
 prev: 0000000a36b00b60a3fa6bb9a8d8ffa1e1bf75ddbd2f494de5c01d39959d7895
nonce: 3531506 minted: Thu Feb 22 18:18:27 PST 2018 
[MINT new coins. 5 <-- 50btc mining reward iKx1CJMuy4dyLUSF7jVcyrjeK5yJKWm5r7XC49EejY41NcQCSKaGsah4JQCmv1gbYTm5jzLJF8vQ4V2U3FmckuYbtJ9mkymJPZ 
, TXN at 18:18:02 2 --> 9.562btc to 6 iKx1CJMQng2vpKVN27hWGGj2nnndJx7nHchjyiPrEiFZznDV9XpgfiUQfac6Wv35AgeXQpad1m3BycdyLP7PgpssJnwon3beW9 
, TXN at 18:18:15 0 --> 8.341btc to 5 AN1rKrLMeWPAVz7JDScpwG4dnoQbLRKp3X6piL3sgVDyHvZiabpe4j2ARhbSjtixdNAFzPAeUcmCbFyf2BMA8tiKyLbF9o5p6 
, TXN at 18:18:15 3 --> 1.192btc to 3 AN1rKvtHZE37ETUnKRqo2YKe6M8M3PJ2v34ZwMBhipKuUuGVYyk58kTDGnbHYhvnoFB7LyAFmAN1s19z39mHtdNLDUj7VgsaS 
, TXN at 18:18:17 6 --> 8.852btc to 6 AN1rKvtEZGYRPeEWcx2fxULfmswrQgPTH2gZznQyVVQEA3VBijrbXzejGgyhhTcJUkwVjqP4Yfea3bFENLpvWw5ch82juBHnB 
 ]

=== BLOCK ===
 hash: 000000841d0ba7701c14e599214a7edc9241a65b1215adebcab12f417a7a4e87
 prev: 000000756b7aa2cf83dac95cf0609989be1d9b60f3cb96303a19249dfcfbf355
nonce: 1207009 minted: Thu Feb 22 18:18:32 PST 2018 
[MINT new coins. 2 <-- 50btc mining reward iKx1CJPgYjqHAsom4ThkW43itcAGWK4fYLjc9byCrHJ3GwPUmXBux5rHenfbZMfg331idzU3LQdRFBziw1EPZHGcnRzQsYGGUf 
, TXN at 18:18:17 6 --> 8.852btc to 6 AN1rKvtEZGYRPeEWcx2fxULfmswrQgPTH2gZznQyVVQEA3VBijrbXzejGgyhhTcJUkwVjqP4Yfea3bFENLpvWw5ch82juBHnB 
, TXN at 18:18:27 2 --> 8.468btc to 6 381yXYxjP7LGoD64vKDzFHckot44WvJCCuGnVqTDxPJgxLzBh72LWPhmrGHJtX9isB5m34LLCZNShFxuAaMnRw9iGsGVQUQo 
 ]



Remaining Repo Files
----------------

Other files in the repo demonstrate various aspects of blockchain or cryptography:

BlockChain.java - simple non-cryptographic consensus over a peer-2-peer network 
GenHash.java    - produce key pair from text seed
GenSig.java     - initially derived from Java tutorial, expanded and re-written
Merkle.java     - simple demonstration of Merkle trees
Mine.java       - standalone (single-node) bitcoin-like hash mining engine
VerSig.java     - initially derived from Java tutorial, expanded and re-written


All code is under MIT Licencse. 

Copyright (c) 2018 dmitrynizh

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.